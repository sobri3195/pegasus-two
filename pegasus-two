#!/bin/sh
# Name : Pegasus Two
# Date : Oktober 2020
# Pegasus Two is a hacking tools installer and package manager for hacker's.

logo="
__________                                          ___________                      
\______   \ ____   _________    ________ __  ______\_   _____/_ __  ______          
 |     ___// __ \ / ___\__  \  /  ___/  |  \/  ___/ |    __)|  |  \/  ___/          
 |    |   \  ___// /_/  > __ \_\___ \|  |  /\___ \  |     \ |  |  /\___ \           
 |____|    \___  >___  (____  /____  >____//____  > \___  / |____//____  >          
               \/_____/     \/     \/           \/      \/             \/           
"
prompt="\007\033[00m[\033[01;34mpegasus-two\033[00m@\033[01;34mspace\033[00m]$"

# checking for system home dir
if [ -d $HOME ]; then
  home=$HOME
else
  home="~/"
fi

# checking for system bin dir
if [ -d /data/data/com.termux/files/usr/bin ]; then
  bin="/data/data/com.termux/files/usr/bin"
elif [ -d /usr/local/bin ]; then
  bin="/usr/local/bin"
elif [ -d /bin ]; then
  bin="/bin"
elif [ -d /sbin ]; then
  bin="/sbin"
fi

# checking for configuration dir
if [ -d /data/data/com.termux/files/usr/etc ]; then
  conf_dir="/data/data/com.termux/files/usr/etc"
elif [ -d /etc ]; then
  conf_dir="/etc"
fi

# configuration files
if [ -d $conf_dir/pegasus-two ]; then
  if [ -e $conf_dir/pegasus-two/data/tools.dat ]; then
    tools_data="$conf_dir/pegasus-two/data/tools.dat"
  fi
  if [ -e $conf_dir/pegasus-two/data/category.dat ]; then
    category_data="$conf_dir/pegasus-two/data/category.dat"
  fi
else
  if [ -e data/tools.dat ]; then
    tools_data="data/tools.dat"
  fi
  if [ -e data/category.dat ]; then
    category_data="data/category.dat"
  fi
fi

# checking for system root access
if [ -e /usr/lib/sudo ]; then
  sudo="sudo"
elif [ -e /usr/bin/sudo ]; then
  sudo="sudo"
elif [ -e /usr/sbin/sudo ]; then
  sudo="sudo"
elif [ -e /lib/sudo ]; then
  sudo="sudo"
elif [ -e /bin/sudo ]; then
  sudo="sudo"
elif [ -e /sbin/sudo ]; then
  sudo="sudo"
elif [ -e /data/data/com.termux/files/usr/bin/sudo ]; then
  sudo="sudo"
else
  sudo=""
fi

# checking for system package manager
if [ -e /bin/apt ]; then
  pac="apt-get"
  system="linux"
elif [ -e /bin/apt-get ]; then
  pac="apt-get"
  system="linux"
elif [ -e /usr/bin/apt-get ]; then
  pac="apt-get"
  system="linux"
elif [ -e /sbin/apt-get ]; then
  pac="apt-get"
  system="linux"
elif [ -e /usr/sbin/apt-get ]; then
  pac="apt-get"
  system="linux"
elif [ -e /bin/apk ]; then
  pac="apk"
  system="linux"
elif [ -e /usr/bin/apk ]; then
  pac="apk"
  system="linux"
elif [ -e /sbin/apk ]; then
  pac="apk"
  system="linux"
elif [ -e /usr/sbin/apk ]; then
  pac="apk"
  system="linux"
elif [ -e /bin/yum ]; then
  pac="yum"
  system="fedora"
elif [ -e /usr/bin/yum ]; then
  pac="yum"
  system="fedora"
elif [ -e /sbin/yum ]; then
  pac="yum"
  system="fedora"
elif [ -e /usr/sbin/yum ]; then
  pac="yum"
  system="fedora"
elif [ -e /usr/local/bin/brew ]; then
  pac="brew"
  system="mac"
  sudo=""
elif [ -e /data/data/com.termux/files/usr/bin/pkg ]; then
  pac="pkg"
  system="termux"
elif [ -e /data/data/com.termux/files/usr/bin/apt ]; then
  pac="apt"
  system="termux"
elif [ -e /data/data/com.termux/files/usr/bin/apt-get ]; then
  pac="apt-get"
  system="termux"
fi

# install tools
install() {
  # get tool alias name
  tool_name=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f1`
  # get tool package manager
  tool_installer=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f5`
  # tool dependency (requirements)
  tool_dependency=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f6 | tr ' ' ','`
  # tool url
  tool_url=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f4`
  # package name or tool name
  tool_pac=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f2`
  # check tool name is null or not
  if [ "$tool_name" ]; then

    # for default package
    if [ $tool_installer = "package_manager" ]; then
      # check tool is already installed or not
      if [ ! -e $bin/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_pac != "" -a $tool_pac != "null" ]; then
              $sudo $pac install $tool_pac -y
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_pac != "" -a $tool_pac != "null" ]; then
              $pac install $tool_pac -y
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e $bin/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for github tools
    elif [ $tool_installer = "git" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo git clone $tool_url ~/$tool_name
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              git clone $tool_url ~/$tool_name
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for curl tools
    elif [ $tool_installer = "curl" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo curl -o ~/$tool_pac $tool_url
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              curl -o ~/$tool_pac $tool_url
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for wget tools
    elif [ $tool_installer = "wget" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo wget $tool_url -O ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              wget $tool_url -O ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi
    # for any new installer
    # put here
    fi
  fi
  # wait for user any input
  echo -n "$prompt "
  read tmp_inp
}

# remove tools
remove() {
  # get tool alias name
  tool_name=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f1`
  # get tool package manager
  tool_installer=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f5`
  # package name or tool name
  tool_pac=`grep '.' $tools_data | sort -f | sed -n "$1p" | cut -d"|" -f2`
  # check tool name is null or not
  if [ "$tool_name" ]; then

    # for default package
    if [ $tool_installer = "package_manager" ]; then
      # check tool is installed or not
      if [ -e $bin/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          echo "\033[01;33mRemoving ...\033[00m"
          sleep 1
          $sudo $pac remove $tool_pac -y
        else
          echo "\033[01;33mRemoving ...\033[00m"
          sleep 1
          $pac remove $tool_pac -y
        fi
        # check tool is removed or not
        if [ ! -e $bin/$tool_pac ]; then
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis removed successfully !!\033[00m"
        else
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mcould not be removed !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
      fi

    # for github/curl/wget tools
    elif [ $tool_installer = "git" -o $tool_installer = "curl" -o $tool_installer = "wget" ]; then
      # check tool is installed or not
      if [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
        echo "\033[01;33mRemoving ...\033[00m"
        sleep 1
        if [ $sudo ]; then
          $sudo rm -rf ~/$tool_pac
        else
          rm -rf ~/$tool_pac
        fi
        # check tool is removed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis removed successfully !!\033[00m"
        else
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mcould not be removed !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
      fi
    fi
  fi
  # wait for user any input
  echo -n "$prompt "
  read tmp_inp
}

# install category tools
install_category_tool() {
  # get tool alias name
  tool_name=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f1`
  # get tools package manager
  tool_installer=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f5`
  # tool dependency (requirements)
  tool_dependency=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f6 | tr ' ' ','`
  # tool url
  tool_url=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f4`
  # package name or tool name
  tool_pac=`grep '.' $tools_data | sort -f | sed -n "/$1/p" | sed -n "$2 p" | cut -d"|" -f2`
  # check tool name is null or not
  if [ "$tool_name" ]; then

    # for default package
    if [ $tool_installer = "package_manager" ]; then
      # check tool is already installed or not
      if [ ! -e $bin/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_pac != "" -a $tool_pac != "null" ]; then
              $sudo $pac install $tool_pac -y
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_pac != "" -a $tool_pac != "null" ]; then
              $pac install $tool_pac -y
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e $bin/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for github tools
    elif [ $tool_installer = "git" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo git clone $tool_url ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              git clone $tool_url ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for curl tools
    elif [ $tool_installer = "curl" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo curl -o ~/$tool_pac $tool_url
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              curl -o ~/$tool_pac $tool_url
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for wget tools
    elif [ $tool_installer = "wget" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo wget $tool_url -O ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              wget $tool_url -O ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi
    # for any new installer
    # put here
    fi
  fi
  # wait for user any input
  echo -n "$prompt "
  read tmp_inp
}

# list all tools from data
all_tools() {
  while true; do
    clear
    # get all tools data
    echo " \033[01;31m___
//___// \033[01;33mAll Tools
"
    for data in `grep "." $tools_data | sort -f | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
      # display tools name from data
      for tool in $data; do
        echo " \033[01;32m$tool" | tr '|' ' ' | tr '@' ' '
      done
    done
    echo " \033[01;32m0 Back"
    echo -n "$prompt "
    read cmd
    # count total number of tools
    list=`grep -n "." $tools_data | wc -l`
    # process user input
    case $cmd in
      [1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9])
        if [ $cmd -le $list ]; then
          # install tools
          install $cmd
        else
          echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
          sleep 1
        fi
      ;;
      0|back|Back)
        break
      ;;
      *)
        echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
        sleep 1
      ;;
    esac
  done
}

# category function
category() {
  while true; do
    clear
    # get all category data
    echo " \033[01;31m___
//___// \033[01;33mTool Category
"
    for data in `grep "." $category_data | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
      # display category alias name from data
      for category in $data; do
        echo " \033[01;32m$category" | tr '|' ' ' | tr '@' ' '
      done
    done
    echo " \033[01;32m0 Back"
    echo -n "$prompt "
    read cmd
    # count total number of category
    list=`grep -n "." $category_data | wc -l`
    # process user input
    case $cmd in
      [1-9]|[1-9][0-9])
        if [ $cmd -le $list ]; then
          while true; do
            clear
            # display all tools of selected category
            category=`grep '.' $category_data | sed -n "$cmd p" | cut -d"|" -f2`
            category_alias=`grep '.' $category_data | sed -n "$cmd p" | cut -d"|" -f1`
            # get all tools data and display
            echo " \033[01;31m___
//___// \033[01;33m$category_alias
"
            for data in `grep "." $tools_data | sort -f | sed -n "/$category/p" | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
              # display tools name from data
              for tool in $data; do
                echo " \033[01;32m$tool" | tr '|' ' ' | tr '@' ' '
              done
            done
            echo " \033[01;32m0 Back"
            echo -n "$prompt "
            read tmp_cmd
            # count total number of tools in category
            list=`grep -n "." $tools_data | sed -n "/$category/p" | wc -l`
            # process user input
            case $tmp_cmd in
              [1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9])
                if [ $tmp_cmd -le $list ]; then
                  # install tools
                  install_category_tool $category $tmp_cmd
                else
                  echo "\007\033[00m'$tmp_cmd': \033[01;31minvalid option!!"
                  sleep 1
                fi
              ;;
                0|back|Back)
                break
              ;;
              *)
                echo "\007\033[00m'$tmp_cmd': \033[01;31minvalid option!!"
                sleep 1
              ;;
            esac
          done
        else
          echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
          sleep 1
        fi
      ;;
      0|back|Back)
        break
      ;;
      *)
        echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
        sleep 1
      ;;
    esac
  done
}

# update pegasus-two function
update() {
  while true; do
    clear
    echo "$logo"
    echo " \033[00m[1] \033[01;32mUpdate\033[00m"
    echo " \033[00m[0] \033[01;32mBack"
    echo -n "$prompt "
    read cmd
    case $cmd in
      1)
        # check user is online or not
        wget -q --spider http://google.com
        if [ $? -eq 0 ]; then
          echo "\033[01;32mUpdating ...\033[00m"
          sleep 1
          if [ -e $bin/git ]; then
            if [ $sudo ]; then
              $sudo git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
              $sudo chmod +x ~/pegasus-two/install
              $sudo sh ~/pegasus-two/install
            else
              git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
              chmod +x ~/pegasus-two/install
              sh ~/pegasus-two/install
            fi
          else
            if [ $sudo ]; then
              $sudo $pac install git -y
              $sudo git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
              $sudo chmod +x ~/pegasus-two/install
              $sudo sh ~/pegasus-two/install
            else
              $pac install git -y
              git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
              chmod +x ~/pegasus-two/install
              sh ~/pegasus-two/install
            fi
          fi
          echo "\007\033[01;32mpegasus-two updated !!\033[00m"
          sleep 1
        else
          echo "\007\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          sleep 1
        fi
      ;;
      0)
        break
      ;;
      *)
        echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
        sleep 1
      ;;
    esac
  done
}

# log file path
log_file="$conf_dir/pegasus-two/pegasus.log"
history_file="$conf_dir/pegasus-two/history.log"
favorites_file="$conf_dir/pegasus-two/favorites.dat"
config_file="$conf_dir/pegasus-two/config.conf"
backup_dir="$conf_dir/pegasus-two/backups"

# create log directory if not exists
if [ ! -d $conf_dir/pegasus-two ]; then
  if [ $sudo ]; then
    $sudo mkdir -p $conf_dir/pegasus-two
  else
    mkdir -p $conf_dir/pegasus-two
  fi
fi

# Feature 1: Logging system
log_action() {
  timestamp=`date '+%Y-%m-%d %H:%M:%S'`
  echo "[$timestamp] $1" >> $log_file 2>/dev/null
  echo "[$timestamp] $1" >> $history_file 2>/dev/null
}

# Feature 2: Backup tools before removal
backup_tool() {
  tool_name=$1
  tool_pac=$2
  timestamp=`date '+%Y%m%d_%H%M%S'`
  
  if [ ! -d $backup_dir ]; then
    if [ $sudo ]; then
      $sudo mkdir -p $backup_dir
    else
      mkdir -p $backup_dir
    fi
  fi
  
  if [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
    backup_path="$backup_dir/${tool_name}_${timestamp}.tar.gz"
    echo "\033[01;33mCreating backup...\033[00m"
    if [ $sudo ]; then
      $sudo tar -czf $backup_path -C ~ $tool_pac 2>/dev/null
    else
      tar -czf $backup_path -C ~ $tool_pac 2>/dev/null
    fi
    if [ $? -eq 0 ]; then
      echo "\033[01;32mBackup created: $backup_path\033[00m"
      log_action "BACKUP: $tool_name backed up to $backup_path"
    fi
  fi
}

# Feature 3: Tool information display
cli_info() {
  for data in `grep -i "^$1" $tools_data`; do
    for tool in $data; do
      if [ `echo $tool | cut -d"|" -f1 | tr 'A-Z' 'a-z'` = `echo $1 | tr 'A-Z' 'a-z'` ]; then
        get_tool_data=$tool
      fi
    done
  done
  
  if [ "$get_tool_data" ]; then
    tool_name=`echo $get_tool_data | cut -d"|" -f1`
    tool_pac=`echo $get_tool_data | cut -d"|" -f2`
    tool_desc=`echo $get_tool_data | cut -d"|" -f3`
    tool_url=`echo $get_tool_data | cut -d"|" -f4`
    tool_installer=`echo $get_tool_data | cut -d"|" -f5`
    tool_dependency=`echo $get_tool_data | cut -d"|" -f6`
    
    echo "\033[01;33m=== Tool Information ===\033[00m"
    echo "\033[01;32mName:\033[00m $tool_name"
    echo "\033[01;32mPackage:\033[00m $tool_pac"
    echo "\033[01;32mDescription:\033[00m $tool_desc"
    echo "\033[01;32mURL:\033[00m $tool_url"
    echo "\033[01;32mInstaller:\033[00m $tool_installer"
    echo "\033[01;32mDependencies:\033[00m $tool_dependency"
    
    if [ -e $bin/$tool_pac ] || [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
      echo "\033[01;32mStatus:\033[00m Installed"
    else
      echo "\033[01;32mStatus:\033[00m Not Installed"
    fi
  else
    echo "\033[01;31mTool not found!\033[00m"
  fi
}

# Feature 4: Export installed tools
cli_export() {
  export_file="${1:-$home/pegasus_installed_tools.txt}"
  echo "\033[01;32mExporting installed tools to $export_file...\033[00m"
  echo "# Pegasus-Two Installed Tools - $(date)" > $export_file
  
  for data in `grep "." $tools_data | sort -f`; do
    tool_name=`echo $data | cut -d"|" -f1`
    tool_pac=`echo $data | cut -d"|" -f2`
    
    if [ -e $bin/$tool_pac ] || [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
      echo "$tool_name" >> $export_file
    fi
  done
  
  echo "\033[01;32mExport completed!\033[00m"
  log_action "EXPORT: Installed tools exported to $export_file"
}

# Feature 5: Import and install tools from file
cli_import() {
  import_file=$1
  if [ ! -e "$import_file" ]; then
    echo "\033[01;31mFile not found: $import_file\033[00m"
    return
  fi
  
  echo "\033[01;32mImporting tools from $import_file...\033[00m"
  while IFS= read -r tool_name; do
    if [ ! -z "$tool_name" ] && [ "${tool_name:0:1}" != "#" ]; then
      echo "\033[01;33mInstalling $tool_name...\033[00m"
      cli_install "$tool_name"
    fi
  done < "$import_file"
  
  echo "\033[01;32mImport completed!\033[00m"
  log_action "IMPORT: Tools imported from $import_file"
}

# Feature 6: Favorites system
cli_favorite_add() {
  tool_name=$1
  if grep -q "^$tool_name$" $favorites_file 2>/dev/null; then
    echo "\033[01;33m'$tool_name' is already in favorites!\033[00m"
  else
    echo "$tool_name" >> $favorites_file
    echo "\033[01;32m'$tool_name' added to favorites!\033[00m"
    log_action "FAVORITE_ADD: $tool_name"
  fi
}

cli_favorite_remove() {
  tool_name=$1
  if [ -e $favorites_file ]; then
    grep -v "^$tool_name$" $favorites_file > ${favorites_file}.tmp
    mv ${favorites_file}.tmp $favorites_file
    echo "\033[01;32m'$tool_name' removed from favorites!\033[00m"
    log_action "FAVORITE_REMOVE: $tool_name"
  fi
}

cli_favorite_list() {
  if [ -e $favorites_file ]; then
    echo "\033[01;33m=== Favorite Tools ===\033[00m"
    echo -n "\033[01;32m"
    cat $favorites_file
    echo -n "\033[00m"
  else
    echo "\033[01;31mNo favorite tools yet!\033[00m"
  fi
}

# Feature 7: Batch install
cli_batch_install() {
  shift
  for tool in "$@"; do
    echo "\033[01;33mInstalling $tool...\033[00m"
    cli_install "$tool"
  done
  log_action "BATCH_INSTALL: $@"
}

# Feature 8: Statistics
cli_stats() {
  total_tools=`grep -n "." $tools_data | wc -l`
  installed_count=0
  
  for data in `grep "." $tools_data | sort -f`; do
    tool_pac=`echo $data | cut -d"|" -f2`
    if [ -e $bin/$tool_pac ] || [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
      installed_count=$((installed_count + 1))
    fi
  done
  
  echo "\033[01;33m=== Pegasus-Two Statistics ===\033[00m"
  echo "\033[01;32mTotal Tools Available:\033[00m $total_tools"
  echo "\033[01;32mInstalled Tools:\033[00m $installed_count"
  echo "\033[01;32mNot Installed:\033[00m $((total_tools - installed_count))"
  
  if [ -e $history_file ]; then
    install_actions=`grep -c "INSTALL:" $history_file 2>/dev/null || echo 0`
    remove_actions=`grep -c "REMOVE:" $history_file 2>/dev/null || echo 0`
    echo "\033[01;32mTotal Installations:\033[00m $install_actions"
    echo "\033[01;32mTotal Removals:\033[00m $remove_actions"
  fi
}

# Feature 9: View history
cli_history() {
  if [ -e $history_file ]; then
    lines=${1:-20}
    echo "\033[01;33m=== Recent History (last $lines entries) ===\033[00m"
    tail -n $lines $history_file
  else
    echo "\033[01;31mNo history available!\033[00m"
  fi
}

# Feature 10: Dry-run mode
cli_dry_run() {
  echo "\033[01;33m=== DRY RUN MODE ===\033[00m"
  echo "\033[01;32mThis would install: $1\033[00m"
  
  for data in `grep -i "^$1" $tools_data`; do
    for tool in $data; do
      if [ `echo $tool | cut -d"|" -f1 | tr 'A-Z' 'a-z'` = `echo $1 | tr 'A-Z' 'a-z'` ]; then
        tool_name=`echo $tool | cut -d"|" -f1`
        tool_dependency=`echo $tool | cut -d"|" -f6`
        tool_installer=`echo $tool | cut -d"|" -f5`
        
        echo "\033[01;32mTool:\033[00m $tool_name"
        echo "\033[01;32mInstaller:\033[00m $tool_installer"
        
        if [ "$tool_dependency" != "null" ]; then
          echo "\033[01;32mDependencies to install:\033[00m $tool_dependency"
        else
          echo "\033[01;32mNo dependencies\033[00m"
        fi
      fi
    done
  done
}

# Feature 11: List installed tools only
cli_list_installed() {
  echo "\033[01;33m=== Installed Tools ===\033[00m"
  for data in `grep "." $tools_data | sort -f`; do
    tool_name=`echo $data | cut -d"|" -f1`
    tool_pac=`echo $data | cut -d"|" -f2`
    
    if [ -e $bin/$tool_pac ] || [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
      echo "\033[01;32m$tool_name\033[00m"
    fi
  done
}

# Feature 12: List by category in CLI
cli_list_category() {
  category_num=$1
  if [ -z "$category_num" ]; then
    cli_category
    return
  fi
  
  category=`grep '.' $category_data | sed -n "${category_num}p" | cut -d"|" -f2`
  category_alias=`grep '.' $category_data | sed -n "${category_num}p" | cut -d"|" -f1`
  
  if [ "$category" ]; then
    echo "\033[01;33m=== Tools in $category_alias ===\033[00m"
    grep "." $tools_data | sort -f | sed -n "/$category/p" | cut -d"|" -f1 | while read tool; do
      echo "\033[01;32m$tool\033[00m"
    done
  else
    echo "\033[01;31mCategory not found!\033[00m"
  fi
}

# Feature 13: Verify tool installation
cli_verify() {
  tool_name=$1
  for data in `grep -i "^$tool_name" $tools_data`; do
    for tool in $data; do
      if [ `echo $tool | cut -d"|" -f1 | tr 'A-Z' 'a-z'` = `echo $tool_name | tr 'A-Z' 'a-z'` ]; then
        tool_pac=`echo $tool | cut -d"|" -f2`
        tool_installer=`echo $tool | cut -d"|" -f5`
        
        echo "\033[01;33mVerifying $tool_name...\033[00m"
        
        if [ $tool_installer = "package_manager" ]; then
          if [ -e $bin/$tool_pac ]; then
            echo "\033[01;32m✓ $tool_name is installed and found at $bin/$tool_pac\033[00m"
            if [ -x $bin/$tool_pac ]; then
              echo "\033[01;32m✓ Executable permissions OK\033[00m"
            else
              echo "\033[01;31m✗ Not executable\033[00m"
            fi
          else
            echo "\033[01;31m✗ $tool_name is not installed\033[00m"
          fi
        else
          if [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
            echo "\033[01;32m✓ $tool_name is installed at ~/$tool_pac\033[00m"
          else
            echo "\033[01;31m✗ $tool_name is not installed\033[00m"
          fi
        fi
      fi
    done
  done
}

# Feature 14: Clean backups
cli_clean_backups() {
  if [ -d $backup_dir ]; then
    backup_count=`ls -1 $backup_dir | wc -l`
    echo "\033[01;33mFound $backup_count backup(s)\033[00m"
    echo "\033[01;31mDelete all backups? (y/n)\033[00m"
    read confirm
    if [ "$confirm" = "y" ] || [ "$confirm" = "Y" ]; then
      if [ $sudo ]; then
        $sudo rm -rf $backup_dir/*
      else
        rm -rf $backup_dir/*
      fi
      echo "\033[01;32mBackups cleaned!\033[00m"
      log_action "CLEAN: All backups deleted"
    fi
  else
    echo "\033[01;31mNo backups found!\033[00m"
  fi
}

# Feature 15: Configuration management
cli_config_set() {
  key=$1
  value=$2
  if [ -z "$key" ] || [ -z "$value" ]; then
    echo "\033[01;31mUsage: pegasus-two config set <key> <value>\033[00m"
    return
  fi
  
  if [ -e $config_file ]; then
    grep -v "^$key=" $config_file > ${config_file}.tmp 2>/dev/null
    mv ${config_file}.tmp $config_file 2>/dev/null
  fi
  
  ( echo "$key=$value" >> $config_file ) 2>/dev/null
  if [ $? -eq 0 ]; then
    echo "\033[01;32mConfiguration saved: $key=$value\033[00m"
    log_action "CONFIG_SET: $key=$value"
  else
    echo "\033[01;31mFailed to save configuration (permission denied)\033[00m"
  fi
}

cli_config_get() {
  key=$1
  if [ -z "$key" ]; then
    if [ -e $config_file ]; then
      echo "\033[01;33m=== Configuration ===\033[00m"
      cat $config_file
    else
      echo "\033[01;31mNo configuration found!\033[00m"
    fi
    return
  fi
  
  if [ -e $config_file ]; then
    value=`grep "^$key=" $config_file | cut -d"=" -f2-`
    if [ "$value" ]; then
      echo "$value"
    else
      echo "\033[01;31mKey not found: $key\033[00m"
    fi
  else
    echo "\033[01;31mNo configuration found!\033[00m"
  fi
}

# about pegasus-two function
about() {
  clear
  echo "$logo"
  echo " \033[01;33mpegasus-two \033[01;31mv0.2\033[00m"
  echo " pegasus-two is a library of all"
  echo " hacking tools for termux"
  echo " and other linux distribution."
  echo -n "$prompt "
  read tmp
}

# remove tools menu function
remove_tools() {
  while true; do
    clear
    # get all tools data
    echo " \033[01;31m___
//___// \033[01;33mRemove Tools
"
    for data in `grep "." $tools_data | sort -f | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
      # display tools name from data
      for tool in $data; do
        echo " \033[01;32m$tool" | tr '|' ' ' | tr '@' ' '
      done
    done
    echo " \033[01;32m0 Back"
    echo -n "$prompt "
    read cmd
    # count total number of tools
    list=`grep -n "." $tools_data | wc -l`
    # process user input
    case $cmd in
      [1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9])
        if [ $cmd -le $list ]; then
          # remove tools
          remove $cmd
        else
          echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
          sleep 1
        fi
      ;;
      0|back|Back)
        break
      ;;
      *)
        echo "\007\033[00m'$cmd': \033[01;31minvalid option!!"
        sleep 1
      ;;
    esac
  done
}

# this is the main function
menu() {
  while true; do
    clear
    tools=`grep -n '.' $tools_data | wc -l`
    echo "$logo"
    echo " \033[00m[1] \033[01;32mAll tools \033[00m(\033[01;31m$tools tools\033[00m)"
    echo " \033[00m[2] \033[01;32mTools category"
    echo " \033[00m[3] \033[01;32mRemove tool"
    echo " \033[00m[4] \033[01;32mUpdate pegasus-two"
    echo " \033[00m[5] \033[01;32mAbout us"
    echo " \033[00m[6] \033[01;32mExit"
    echo -n "$prompt "
    read cmd
    case $cmd in
      1)
        all_tools
      ;;
      2)
        category
      ;;
      3)
        remove_tools
      ;;
      4)
        update
      ;;
      5)
        about
      ;;
      6|exit|Exit)
        echo "\007\033[01;32mExiting ....\033[00m"
        break
      ;;
      *)
        echo "\007\033[00m'$cmd': \033[01;31minvalid option!!\033[00m"
        sleep 1
      ;;
    esac
  done
}


# list all tools from data
cli_list_all() {
  # get all tools data
  tool=`grep "." $tools_data | sort -f | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr '|' ' '`
  # display tools name from data
  echo "\033[01;32m$tool\033[00m"
}

# category function
cli_category() {
  # get all category data
  for data in `grep "." $category_data | grep -n '.' | sed -n 's/:/|/p' | cut -d"|" -f1,2 | tr ' ' '@'`; do
    # display category alias name from data
    for category in $data; do
      echo " \033[01;32m$category\033[00m" | tr '|' ' ' | tr '@' ' '
    done
  done
}

# update process
update_process() {
  # check file is downloaded or not
  if [ -e $home/pegasus-two/pegasus-two ]; then
    # removing old one
    if [ -e $bin/pegasus-two ]; then
      if [ -d $conf_dir/pegasus-two ]; then
        if [ $sudo ]; then
          $sudo rm -rf $bin/pegasus-two
          $sudo rm -rf $conf_dir/pegasus-two
        else
          rm -rf $bin/pegasus-two
          rm -rf $conf_dir/pegasus-two
        fi
      fi
    fi
  fi

  # updating pegasus-two
  if [ -e $home/pegasus-two/pegasus-two ]; then
    if [ $sudo ]; then
      $sudo mv -v $home/pegasus-two/pegasus-two $bin
      $sudo chmod +x $bin/pegasus-two
    else
      mv -v $home/pegasus-two/pegasus-two $bin
      chmod +x $bin/pegasus-two
    fi
  fi
  if [ -d $home/pegasus-two ]; then
    if [ $sudo ]; then
    $sudo mv -v $home/pegasus-two $conf_dir
    else
      mv -v $home/pegasus-two $conf_dir
    fi
  fi
}

# update pegasus-two function
cli_update() {
  # check user is online or not
  wget -q --spider http://google.com
  if [ $? -eq 0 ]; then
    echo "\033[01;32mUpdating ...\033[00m"
    sleep 1
    if [ -e $bin/git ]; then
      if [ $sudo ]; then
        $sudo git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
        update_process
      else
        git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
        update_process
       fi
    else
      if [ $sudo ]; then
        $sudo $pac install git -y
        $sudo git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
        update_process
      else
        $pac install git -y
        git clone https://github.com/rajkumardusad/pegasus-two.git ~/pegasus-two
        update_process
      fi
    fi
    echo "\033[00m'pegasus-two' \033[01;32mupdated successfully !!\033[00m"
  else
    echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
  fi
}

# cli install process
install_process() {
  # get tool alias name
  tool_name=`echo $1 | cut -d"|" -f1`
  # get tool package manager
  tool_installer=`echo $1 | cut -d"|" -f5`
  # tool dependency (requirements)
  tool_dependency=`echo $1 | cut -d"|" -f6 | tr ' ' ','`
  # tool url
  tool_url=`echo $1 | cut -d"|" -f4`
  # package name or tool name
  tool_pac=`echo $1 | cut -d"|" -f2`

  # check tool name is null or not
  if [ "$tool_name" ]; then

    # for default package
    if [ $tool_installer = "package_manager" ]; then
      # check tool is already installed or not
      if [ ! -e $bin/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_pac != "" -a $tool_pac != "null" ]; then
              $sudo $pac install $tool_pac -y
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_pac != "" -a $tool_pac != "null" ]; then
              $pac install $tool_pac -y
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e $bin/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for github tools
    elif [ $tool_installer = "git" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo git clone $tool_url ~/$tool_name
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              git clone $tool_url ~/$tool_name
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for curl tools
    elif [ $tool_installer = "curl" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo curl -o ~/$tool_pac $tool_url
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              curl -o ~/$tool_pac $tool_url
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi

    # for wget tools
    elif [ $tool_installer = "wget" ]; then
      # check tool is already installed or not
      if [ ! -e ~/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            # install tool dependency
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $sudo $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              $sudo wget $tool_url -O ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry you are offline !!\033[00m"
          fi
        else
          #check user is online or not
          wget -q --spider http://google.com
          if [ $? -eq 0 ]; then
            echo "\033[01;32mInstalling ...\033[00m"
            sleep 1
            # install tool dependency
            if [ $tool_dependency != "null" ]; then
              for dep_name in `echo $tool_dependency | tr ',' ' '`; do
                # installing dependency
                if [ ! -e $bin/$dep_name ]; then
                  $pac install $dep_name -y
                fi
              done
            fi
            # installing tools
            if [ $tool_url != "" -a $tool_url != "null" ]; then
              wget $tool_url -O ~/$tool_pac
            fi
          else
            echo "\033[01;31mSorry \033[00m: you are \033[01;31moffline \033[00m!!\033[00m"
          fi
        fi
        # check tool is installed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
        else
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis installed successfully !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: \033[00m'$tool_name' \033[01;32mis already installed !!\033[00m"
      fi
    # for any new installer
    # put here
    fi
  fi
}

# check tool is exists or not
cli_install() {
  # get tools data
  for data in `grep -i "^$1" $tools_data`; do
    # display tools name from data
    for tool in $data; do
      # convert to lower case and check tool name
      if [ `echo $tool | cut -d"|" -f1 | tr 'A-Z' 'a-z'` = `echo $1 | tr 'A-Z' 'a-z'` ]; then
        get_tool_data=$tool
      fi
    done
  done
  # check data exists or not
  if [ $get_tool_data ]; then
    install_process $get_tool_data
  else
    echo "\033[01;31mSorry \033[00m: '$1' \033[01;31mtool not found !!\033[00m"
    similar=`grep -i "^$1" $tools_data | cut -d"|" -f1`
    if [ "$similar" ]; then
      echo "\033[01;34mDid you mean\033[00m:"
      echo -n "\033[01;32m"
      grep -i "^$1" $tools_data | cut -d"|" -f1
      echo -n "\033[00m"
    fi
  fi
}

# search tool
cli_search() {
  # get tools data
  similar=`grep -i "^$1" $tools_data | cut -d"|" -f1`
  if [ "$similar" ]; then
    echo -n "\033[01;32m"
    grep -i "^$1" $tools_data | cut -d"|" -f1
    echo -n "\033[00m"
  fi
}

# remove process for individual tools
remove_process() {
  # get tool alias name
  tool_name=`echo $1 | cut -d"|" -f1`
  # get tool package manager
  tool_installer=`echo $1 | cut -d"|" -f5`
  # package name or tool name
  tool_pac=`echo $1 | cut -d"|" -f2`

  # check tool name is null or not
  if [ "$tool_name" ]; then

    # for default package
    if [ $tool_installer = "package_manager" ]; then
      # check tool is installed or not
      if [ -e $bin/$tool_pac ]; then
        # check sudo is null or not
        if [ $sudo ]; then
          echo "\033[01;33mRemoving ...\033[00m"
          sleep 1
          $sudo $pac remove $tool_pac -y
        else
          echo "\033[01;33mRemoving ...\033[00m"
          sleep 1
          $pac remove $tool_pac -y
        fi
        # check tool is removed or not
        if [ ! -e $bin/$tool_pac ]; then
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis removed successfully !!\033[00m"
        else
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mcould not be removed !!\033[00m"
        fi
      else
        echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
      fi

    # for github tools
    elif [ $tool_installer = "git" -o $tool_installer = "curl" -o $tool_installer = "wget" ]; then
      # check tool is installed or not
      if [ -e ~/$tool_pac ] || [ -d ~/$tool_pac ]; then
        backup_tool "$tool_name" "$tool_pac"
        echo "\033[01;33mRemoving ...\033[00m"
        sleep 1
        if [ $sudo ]; then
          $sudo rm -rf ~/$tool_pac
        else
          rm -rf ~/$tool_pac
        fi
        # check tool is removed or not
        if [ ! -e ~/$tool_pac ]; then
          echo "\033[00m'$tool_name' \033[00m: \033[01;32mis removed successfully !!\033[00m"
          log_action "REMOVE_SUCCESS: $tool_name"
        else
          echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mcould not be removed !!\033[00m"
          log_action "REMOVE_FAILED: $tool_name"
        fi
      else
        echo "\033[01;31mSorry \033[00m: '$tool_name' \033[01;31mis not installed !!\033[00m"
      fi
    fi
  fi
}

# remove function
cli_remove() {
  # if no argument provided, uninstall pegasus-two
  if [ -z "$1" ]; then
    # removing pegasus-two only
    if [ -e $bin/pegasus-two ]; then
      if [ -d $conf_dir/pegasus-two ]; then
        if [ $sudo ]; then
          $sudo rm -rf $bin/pegasus-two
          $sudo rm -rf $conf_dir/pegasus-two
        else
          rm -rf $bin/pegasus-two
          rm -rf $conf_dir/pegasus-two
        fi
      fi
    fi
    # check pegasus-two removed or not
    if [ ! -e $bin/pegasus-two ]; then
      if [ ! -d $conf_dir/pegasus-two ]; then
        echo "\033[00m'pegasus-two' : \033[01;32muninstalled successfully !!\033[00m"
      fi
    fi
  else
    # remove individual tool
    # get tools data
    for data in `grep -i "^$1" $tools_data`; do
      # display tools name from data
      for tool in $data; do
        # convert to lower case and check tool name
        if [ `echo $tool | cut -d"|" -f1 | tr 'A-Z' 'a-z'` = `echo $1 | tr 'A-Z' 'a-z'` ]; then
          get_tool_data=$tool
        fi
      done
    done
    # check data exists or not
    if [ $get_tool_data ]; then
      remove_process $get_tool_data
    else
      echo "\033[01;31mSorry \033[00m: '$1' \033[01;31mtool not found !!\033[00m"
      similar=`grep -i "^$1" $tools_data | cut -d"|" -f1`
      if [ "$similar" ]; then
        echo "\033[01;34mDid you mean\033[00m:"
        echo -n "\033[01;32m"
        grep -i "^$1" $tools_data | cut -d"|" -f1
        echo -n "\033[00m"
      fi
    fi
  fi
}

# cli mode
if [ $# -eq 1 ]; then
  case $1 in
    start)
      menu
    ;;
    list|-l)
      cli_list_all
    ;;
    update|-u)
      cli_update
    ;;
    remove|-r)
      cli_remove
    ;;
    category|-c)
      cli_category
    ;;
    stats)
      cli_stats
    ;;
    history)
      cli_history
    ;;
    installed)
      cli_list_installed
    ;;
    favorites)
      cli_favorite_list
    ;;
    help|-h)
      echo "\033[01;33mpegasus-two \033[01;31mv0.2"
      echo "\033[00mUsage \033[00m: \033[01;33m pegasus-two \033[00m[option]... [toolname]...\033[00m"
      echo "\n  \033[01;34mOption  \t\tDescription\033[00m"
      echo "  -----------  \t\t--------------------"
      echo "  help, -h  \t\tdisplay this help."
      echo "  list, -l  \t\tlist all tools."
      echo "  list -a  \t\tlist all tools."
      echo "  installed  \t\tlist installed tools only."
      echo "  category, -c  \tlist all categories."
      echo "  install, -i [tool]  \tinstall a tool."
      echo "  search, -s [tool]  \tsearch tools."
      echo "  remove, -r [tool]  \tremove a tool."
      echo "  update, -u  \t\tupdate pegasus-two."
      echo "  info [tool]  \t\tshow tool information."
      echo "  verify [tool]  \tverify tool installation."
      echo "  stats  \t\tshow statistics."
      echo "  history [n]  \t\tshow history (last n entries)."
      echo "  export [file]  \texport installed tools list."
      echo "  import [file]  \timport and install tools."
      echo "  favorite add [tool]  \tadd tool to favorites."
      echo "  favorite remove [tool]  remove from favorites."
      echo "  favorite list  \tlist favorite tools."
      echo "  dry-run [tool]  \ttest install without executing."
      echo "  backup clean  \tclean all backups."
      echo "  config get [key]  \tget configuration value."
      echo "  config set [key] [val]  set configuration value."
      echo "  start  \t\tstart pegasus-two menu mode."
    ;;
    *)
      echo "\033[01;31mSorry \033[00m: '$1' \033[01;31minvalid option!!\033[00m"
      echo "\033[01;34mtype \033[00m:\n  'pegasus-two -h' or 'pegasus-two help' for help.\033[00m"
    ;;
  esac
elif [ $# -eq 2 ]; then
  case $1 in
    list|-l)
      case $2 in
        -a|a)
          cli_list_all
         ;;
        installed)
          cli_list_installed
         ;;
        *)
          echo "\033[01;31mSorry \033[00m: '$2' \033[01;31minvalid option!!\033[00m"
          echo "\033[01;34mtype \033[00m:\n  'pegasus-two -h' or 'pegasus-two help' for help.\033[00m"
        ;;
      esac
    ;;
    install|-i)
      cli_install $2
    ;;
    search|-s)
      cli_search $2
    ;;
    remove|-r)
      cli_remove $2
    ;;
    info)
      cli_info $2
    ;;
    verify)
      cli_verify $2
    ;;
    history)
      cli_history $2
    ;;
    export)
      cli_export $2
    ;;
    import)
      cli_import $2
    ;;
    dry-run)
      cli_dry_run $2
    ;;
    category)
      cli_list_category $2
    ;;
    backup)
      if [ "$2" = "clean" ]; then
        cli_clean_backups
      fi
    ;;
    config)
      cli_config_get $2
    ;;
    favorite)
      case $2 in
        list)
          cli_favorite_list
        ;;
        *)
          echo "\033[01;31mUsage: pegasus-two favorite [add|remove|list] [tool]\033[00m"
        ;;
      esac
    ;;
    *)
      echo "\033[01;31mSorry \033[00m: '$1' \033[01;31minvalid option!!\033[00m"
      echo "\033[01;34mtype \033[00m:\n  'pegasus-two -h' or 'pegasus-two help' for help.\033[00m"
    ;;
  esac
elif [ $# -eq 3 ]; then
  case $1 in
    favorite)
      case $2 in
        add)
          cli_favorite_add $3
        ;;
        remove)
          cli_favorite_remove $3
        ;;
        *)
          echo "\033[01;31mUsage: pegasus-two favorite [add|remove|list] [tool]\033[00m"
        ;;
      esac
    ;;
    config)
      if [ "$2" = "get" ]; then
        cli_config_get $3
      fi
    ;;
    *)
      echo "\033[01;31mSorry \033[00m: invalid command\033[00m"
      echo "\033[01;34mtype \033[00m:\n  'pegasus-two -h' or 'pegasus-two help' for help.\033[00m"
    ;;
  esac
elif [ $# -eq 4 ]; then
  case $1 in
    config)
      if [ "$2" = "set" ]; then
        cli_config_set $3 $4
      fi
    ;;
    *)
      echo "\033[01;31mSorry \033[00m: invalid command\033[00m"
      echo "\033[01;34mtype \033[00m:\n  'pegasus-two -h' or 'pegasus-two help' for help.\033[00m"
    ;;
  esac
else
  echo "\033[01;34mtype \033[00m:\n  'pegasus-two -h' or 'pegasus-two help' for help.\033[00m"
fi
